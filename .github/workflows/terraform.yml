name: Terraform Azure Landing Zone

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TERRAFORM_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    environment:
      name: ${{ matrix.environment }}-plan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt --check --recursive
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=landing-zone-${{ matrix.environment }}.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
          -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
          --out=tfplan-${{ matrix.environment }}

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: tfplan-${{ matrix.environment }}
          retention-days: 5

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan for ${{ matrix.environment }} 
              <details><summary>Show Plan</summary>
    
              ```
              ${{ steps.plan.outputs.stdout }}
              ```
              </details>
    
              *Pushed by: ${{ github.actor }}, Action: `${{ github.event_name }}`*
    
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-plan
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: cli
          soft_fail: false
          download_external_modules: true

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: .
          soft_fail: false
  
      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'azure'
          only_warn: false
          sarif_upload: true

  terraform-apply-dev:
    name: Apply to Dev
    runs-on: ubuntu-latest
    needs: [terraform-plan, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: dev
      url: https://portal.azure.com
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=landing-zone-dev.tfstate"

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan-dev

    - name: Terraform Apply
      run: terraform apply --auto-approve tfplan-dev

  terraform-apply-staging:
    name: Apply to Staging
    runs-on: ubuntu-latest
    needs: [terraform-plan, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://portal.azure.com
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=landing-zone-staging.tfstate"

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan-staging

    - name: Terraform Apply
      run: terraform apply --auto-approve tfplan-staging

  terraform-apply-prod:
    name: Apply to Production
    runs-on: ubuntu-latest
    needs: [terraform-plan, security-scan, terraform-apply-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: prod
      url: https://portal.azure.com
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=landing-zone-prod.tfstate"

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan-prod

    - name: Terraform Apply
      run: terraform apply --auto-approve tfplan-prod

    - name: Post Deployment Notification
      if: success()
      run: echo "ðŸš€ Production deployment completed successfully!"
