#!/bin/bash

# Azure Landing Zone - Quick Setup Script
# This script helps set up the initial backend storage for Terraform state

set -e # Exit on error

# Colors for output
RED='\u001B[0;31m'
GREEN='\u001B[0;32m'
YELLOW='\u001B[1;33m'
NC='\u001B[0m' # No Color

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Azure Landing Zone â€“ Backend Setup${NC}"
echo -e "${GREEN}========================================${NC}"

# Check prerequisites
echo -e "${YELLOW}Checking prerequisites...${NC}"

if ! command -v az &> /dev/null; then
  echo -e "${RED}Error: Azure CLI is not installed${NC}"
  echo "Please install: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
  exit 1
fi

if ! command -v terraform &> /dev/null; then
  echo -e "${RED}Error: Terraform is not installed${NC}"
  echo "Please install: https://developer.hashicorp.com/terraform/downloads"
  exit 1
fi

echo -e "${GREEN}âœ“ Azure CLI installed${NC}"
echo -e "${GREEN}âœ“ Terraform installed${NC}"
echo ""

# Check Azure Login
echo -e "${YELLOW}Checking Azure authentication...${NC}"
if ! az account show &> /dev/null; then
  echo -e "${RED}Not logged in to Azure${NC}"
  echo "Running 'az login'..."
  az login
fi

SUBSCRIPTION_ID=$(az account show --query id -o tsv)
SUBSCRIPTION_NAME=$(az account show --query name -o tsv)
echo -e "${GREEN}âœ“ Logged in to Azure${NC}"
echo "  Subscription: $SUBSCRIPTION_NAME"
echo "  ID: $SUBSCRIPTION_ID"
echo ""

# Prompt for backend configuration
echo -e "${YELLOW}Backend Storage Configuration${NC}"
echo "This will create resources for Terraform remote state storage."
echo ""

read -p "Resource Group Name [rg-terraform-state]: " RG_NAME
RG_NAME=${RG_NAME:-rg-terraform-state}

read -p "Location [eastus]: " LOCATION
LOCATION=${LOCATION:-eastus}

# Generate unique storage account name
RANDOM_SUFFIX=$(openssl rand -hex 3)
DEFAULT_SA_NAME="tfstates${RANDOM_SUFFIX}"
read -p "Storage Account Name [$DEFAULT_SA_NAME]: " SA_NAME
SA_NAME=${SA_NAME:-$DEFAULT_SA_NAME}

read -p "Container Name [tfstate]: " CONTAINER_NAME
CONTAINER_NAME=${CONTAINER_NAME:-tfstate}

echo ""
echo -e "${YELLOW}Configuration Summary:${NC}"
echo "  Resource Group: $RG_NAME"
echo "  Location: $LOCATION"
echo "  Storage Account: $SA_NAME"
echo "  Container: $CONTAINER_NAME"
echo ""

read -p "Proceed with creation? (yes/no): " CONFIRM
if [[ "$CONFIRM" != "yes" ]]; then
  echo "Aborted."
  exit 0
fi

echo ""
echo -e "${YELLOW}Creating backend resources...${NC}"

# Create resource group
echo "Creating resource group..."
az group create \
  --name "$RG_NAME" \
  --location "$LOCATION" \
  --output none

echo -e "${GREEN}âœ“ Resource group created${NC}"

# Create storage account
echo "Creating storage account (this may take a minute)..."
az storage account create \
  --resource-group "$RG_NAME" \
  --name "$SA_NAME" \
  --sku Standard_LRS \
  --encryption-services blob \
  --min-tls-version TLS1_2 \
  --allow-blob-public-access false \
  --output none

echo -e "${GREEN}âœ“ Storage account created${NC}"

# Get storage account key
echo "Retrieving storage account key..."
ACCOUNT_KEY=$(az storage account keys list \
  --resource-group "$RG_NAME" \
  --account-name "$SA_NAME" \
  --query '[0].value' \
  --output tsv)

# Create container
echo "Creating blob container..."
az storage container create \
  --name "$CONTAINER_NAME" \
  --account-name "$SA_NAME" \
  --account-key "$ACCOUNT_KEY" \
  --output none

echo -e "${GREEN}âœ“ Blob container created${NC}"

# Enable versioning
echo "Enabling blob versioning..."
az storage account blob-service-properties update \
  --resource-group "$RG_NAME" \
  --account-name "$SA_NAME" \
  --enable-versioning true \
  --output none

echo -e "${GREEN}âœ“ Blob versioning enabled${NC}"

# Update backend.hcl
echo ""
echo -e "${YELLOW}Updating backend.hcl...${NC}"

cat > backend.hcl <<EOF
# Backend configuration for Terraform state
# Generated by setup-backend.sh on $(date)

resource_group_name   = "$RG_NAME"
storage_account_name  = "$SA_NAME"
container_name        = "$CONTAINER_NAME"
key                   = "landing-zone.tfstate"
EOF

echo -e "${GREEN}âœ“ backend.hcl updated${NC}"

# Create environment-specific backend configs
mkdir -p environments/dev environments/staging environments/prod

for ENV in dev staging prod; do
  cat > "environments/$ENV/backend.hcl" <<EOF
# Backend configuration for $ENV environment
resource_group_name   = "$RG_NAME"
storage_account_name  = "$SA_NAME"
container_name        = "$CONTAINER_NAME"
key                   = "landing-zone-$ENV.tfstate"
EOF

  echo -e "${GREEN}âœ“ environments/$ENV/backend.hcl created${NC}"
done

# Summary
echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Backend Setup Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "Backend Configuration:"
echo "  Resource Group: $RG_NAME"
echo "  Storage Account: $SA_NAME"
echo "  Container: $CONTAINER_NAME"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo "1. Review and customize terraform.tfvars;"
echo "   cp terraform.tfvars.example terraform.tfvars"
echo ""
echo "2. Initialize Terraform:"
echo "   terraform init -backend-config=backend.hcl"
echo ""
echo "3. Validate configuration:"
echo "   terraform validate"
echo ""
echo "4. Plan deployment:"
echo "   terraform plan"
echo ""
echo "5. Apply infrastructure:"
echo "   terraform apply"
echo ""
echo "For detailed instructions, see DEPLOYMENT.md"
echo ""

# Optional: Initialize Terraform
read -p "Initialize Terraform now? (yes/no): " INIT_NOW
if [ "$INIT_NOW" == "yes" ]; then
  echo ""
  echo -e "${YELLOW}Initializing Terraform...${NC}"
  terraform init -backend-config=backend.hcl
  echo ""
  echo -e "${GREEN}âœ“ Terraform initialized${NC}"
  echo "You can now run: terraform validate && terraform plan"
fi

echo ""
echo -e "${GREEN}Setup complete! Happy Terraforming! ðŸš€${NC}"